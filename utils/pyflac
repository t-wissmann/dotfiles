#!/usr/bin/env python3
import glob, os
import sys
import json
import re
import subprocess
import shutil

import unidecode
import requests
from html.parser import HTMLParser
import datetime
#import discid
#import musicbrainzngs as mb

# encode and tag flac files the python way

def debug(string):
    print(":: " + string, file=sys.stdout)

def fail(string):
    print("ERROR: " + string, file=sys.stdout)
    sys.exit(1)

def string_quoted(string):
    """quote a string to be used in python code"""
    # force the quoting by putting the string into an array
    # then drop the first and the last character for the square brackets
    return str([string])[1:-1]

def fileglob_template_parameters(pattern = '*.wav'):
    code = "sorted(list(glob.glob({})))".format(string_quoted(pattern))
    files = sorted(list(glob.glob(pattern)))
    return {
        'FILELIST_COMMAND': code,
        'FILELIST_EXAMPLE': files,
    }

class UserError(Exception):
    def __init__(self,msg):
        self.msg = msg

def discogs_release_id_from_url(url):
    match = re.search('discogs.com/.*release/([0-9]*)', url)
    if not match:
        raise UserError("Not a valid discogs-release url")
    return match.group(1)

def discogs_release_json(release_id):
    r = requests.get('https://api.discogs.com/releases/' + release_id)
    return json.loads(r.text)

def get_cover_url_by_barcode(barcode):
    images_url = 'http://www.google.com/search?hl=en&q={}+amazon&btnI=745'.format(barcode)
    return images_url

def discogs_template_parameters(discogs_url):
    release_id = discogs_release_id_from_url(discogs_url)
    discogs_json = discogs_release_json(release_id)
    artists = [ a.get('name', '') for a in discogs_json.get('artists', []) ]
    tags = {
        'TRACKNUMBER' : 0,
        'ARTIST' : ', '.join(artists),
        'ALBUM' : discogs_json.get('title', ''),
        'DATE' : str(discogs_json.get('year', '')),
    }
    tracklist = []
    track_index = 0
    for t in discogs_json['tracklist']:
        if t['type_'] == 'track' or t['type_'] == 'index':
            track_index += 1
            pos = t.get('position', str(track_index))
            tracklist.append((pos, t['title']))
            for sub in t.get('sub_tracks', []):
                comment = sub['position'] + ', ' + string_quoted(sub['title'])
                tracklist.append(('#', comment))
        if t['type_'] == 'heading' and 'title' in t:
            tracklist.append(('#',string_quoted(t['title'])))

    barcode = tags['ARTIST'] + '+' + tags['ALBUM']
    for identifier in discogs_json.get('identifiers', []):
        id_type = identifier.get('type', '')
        if id_type == 'Barcode' and 'value' in identifier:
            barcode = identifier['value'].replace(' ', '').replace('-', '')
            break
    cover_url = get_cover_url_by_barcode(barcode)
    return {
        'GLOBAL_TAGS': tags,
        'TRACKLIST': tracklist,
        'TAGS_NOTES': '# generated from ' + discogs_url
    }



def jpc_template_parameters(jpc_url):
    class JPCExtractor(HTMLParser):
        def __init__(self):
            super(JPCExtractor,self).__init__()
            self.fields = {}
            self.action = ""
            self.inCredentials = False
            self.tags = {
                'TRACKNUMBER' : 0,
                'ARTIST' : "",
                'ALBUM' : "",
                'DATE' : "",
            }
            self.on_next_data = None
            self.tracklist = [ ]
            self.cover_url = None
            self.current_depth = 0
            self.last_track_depth = None
            self.track_number = 1

        def handle_starttag(self, tag, attrs):
            self.current_depth += 1
            attrs = dict(attrs)
            if tag == 'a' and 'class' in attrs \
                and attrs['class'] == 'main-image mfp-image' \
                and self.cover_url is None:
                self.cover_url = attrs['href']
            if 'class' in attrs and attrs['class'] == 'box title':
                def set_album(data):
                    self.tags['ALBUM'] = data.strip()
                self.on_next_data = set_album
            if 'itemtype' in attrs and attrs['itemtype'] == 'https://schema.org/MusicRecording':
                self.last_track_depth = self.current_depth
            if 'itemprop' in attrs and attrs['itemprop'] == 'name' \
              and not self.last_track_depth is None:
                def add_track(data):
                    if data.strip() == '':
                        # skip whitespace-only data
                        return False
                    item = (self.track_number, data.strip())
                    self.track_number += 1
                    self.tracklist.append(item)
                self.on_next_data = add_track
            if 'class' in attrs and attrs['class'] == 'subtrack':
                def add_subtrack(data):
                    if data.strip() == '':
                        # skip whitespace-only data
                        return False
                    item = ('#', string_quoted(data.strip()))
                    self.tracklist.append(item)
                self.on_next_data = add_subtrack

        def handle_endtag(self, tag):
            self.current_depth -= 1
            if not self.last_track_depth is None and \
              self.last_track_depth > self.current_depth:
                self.last_track_depth = None

        def handle_data(self, data):
            #print("Encountered some data  :" + data)
            if data.strip() == "KÃ¼nstler:":
                def set_artist(data):
                    self.tags['ARTIST'] = data.strip()
                self.on_next_data = set_artist
            elif data.strip() == "Erscheinungstermin:":
                def set_date(data):
                    self.tags['DATE'] = datetime.datetime.strptime(data.strip(), "%d.%m.%Y").date().isoformat()
                self.on_next_data = set_date
            elif not self.on_next_data is None:
                result = self.on_next_data(data)
                if result is None:
                    self.on_next_data = None
    # instantiate the parser and feed it some HTML
    r = requests.get(jpc_url)
    parser = JPCExtractor()
    parser.feed(r.text)
    tags = {
        'GLOBAL_TAGS': parser.tags,
        'TRACKLIST': parser.tracklist,
        'TAGS_NOTES': '# generated from ' + jpc_url
    }
    if not parser.cover_url is None:
        tags['COVER_URL'] = parser.cover_url
    return tags


def generic_template_parameters(files):
    tags = {
        'TRACKNUMBER' : 0,
        'ARTIST' : "",
        'ALBUM' : "",
        'DATE' : "",
    }
    tracklist = []
    for idx,name in enumerate(files):
        tracklist.append((idx + 1, name))
    return {
        'GLOBAL_TAGS': tags,
        'TRACKLIST': tracklist,
        'TAGS_NOTES': '',
    }

backends = {
  r'http.*discogs.com.*': discogs_template_parameters,
  r'http.*jpc.de.*':     jpc_template_parameters,
}

tags_template="""\
#!/usr/bin/env python3
# vim: ft=python

{TAGS_NOTES}
tags = {{
{GLOBAL_TAGS}  # 'DISC': 1,
}}

tracklist = [
{TRACKLIST}]

files = {FILELIST_COMMAND}
# # currently, this evaluates to:
# files = [
{FILELIST_EXAMPLE}
# ]

music_root('~/musik/')
filepath_format('{{ARTIST}}/{{ALBUM}}/{{TRACKNUMBER:0>2}}. {{TITLE}}.flac')

# optionally download cover art
{COVER_URL_COMMAND}
copy_tags_py() # copy this tags.py file to the target directory

# filter the tracklist for a specific medium
#tracklist = \\
#    [ t for t in tracklist \\
#        if re.search('^CD2-', t[0]) ]

for idx,f in enumerate(files):
    tags['TRACKNUMBER'] = idx + 1
    # disc, track = tracklist[idx][0].split('-')
    # tags['TRACKNUMBER'] = track
    # tags['DISC'] = disc
    tags['TITLE'] = tracklist[idx][1]
    encode(f, tags)

"""

def create_template(parameters, outfile=sys.stdout):
    global tags_template
    tracklist_str = ""
    for k,v in parameters['TRACKLIST']:
        if k == '#':
            tracklist_str += "  # {}\n".format(v)
        else:
            tracklist_str += "  ({:<9}, {}),\n".format(\
                string_quoted(k),
                string_quoted(v))
    global_tags = ""
    for k,v in parameters['GLOBAL_TAGS'].items():
        global_tags += " {:<18}: {},\n".format(\
            string_quoted(k),
            string_quoted(v))

    parameters['TRACKLIST'] = tracklist_str
    parameters['GLOBAL_TAGS'] = global_tags
    # quote FILELIST_EXAMPLE
    file_list_quoted = [ '#   ' + string_quoted(f) + ',' for f in parameters['FILELIST_EXAMPLE'] ]
    parameters['FILELIST_EXAMPLE'] = '\n'.join(file_list_quoted)
    if 'COVER_URL' in parameters:
        url = parameters['COVER_URL']
        parameters['COVER_URL_COMMAND'] = 'cover_url({})'.format(string_quoted(url))
    else:
        parameters['COVER_URL_COMMAND'] = "# cover_url('insert cover url here...')"
    # format template
    tags_py_file = tags_template.format(**parameters)
    print(tags_py_file, file=outfile)

def encode_flac(source_path, target_path, tags):
    flac_cmd = [
        'flac',
        '--best',
        '--output-name=' + target_path,
        source_path,
    ]
    for k, v in tags.items():
        flac_cmd.append('--tag={}={}'.format(k,v))
    # debug(' '.join(flac_cmd))
    if os.path.exists(target_path):
        debug('skipping existing {}'.format(target_path))
        return
    debug('Creating {}'.format(target_path))
    subprocess.call(flac_cmd)

def tags_pathencoded(tags):
    """replace characters that are not allowed in filenames"""
    res = { }
    for k,v in tags.items():
        res[k] = str(v).replace("/", "-")
    return res

class TagsFileResult:
    def __init__(self):
        self.files = []
        self.filepattern = ''
        self.root = '~'
        self.root_expanded = '/'
        self.cover_url = None

        # set by fetch_cover()
        self.cover_response = None
        self.cover_suffix = None

    def fetch_cover(self):
        if self.cover_url is None:
            return
        print("Fetching cover {}".format(self.cover_url))
        r = requests.get(self.cover_url, stream=True)
        type2suffix = {
            'image/jpeg' : 'jpg',
            'image/png'  : 'png',
        }
        if r.status_code != 200:
            fail("Request failed with http code {}".format(r.status_code))
        if not 'Content-Type' in r.headers:
            fail('Content-Type header missing')
        if not r.headers['Content-Type'] in type2suffix:
            fail("Unsupported file type '{}'. Supported filetypes: {}", \
                r.headers['Content-Type'],
                ' '.join(type2suffix.keys()))
        self.cover_response = r
        self.cover_suffix = type2suffix[r.headers['Content-Type']]

    def save_tags_py(self,dir_path):
        if self.copy_tags_py is None:
            return
        target = os.path.join(dir_path, 'tags.py')
        if os.path.isfile(target):
            print("Tags file {} already exists".format(target))
        else:
            print("Saving tags.py to {}".format(target))
            shutil.copyfile(self.tags_py_path, target)

    def save_cover(self,dir_path):
        if self.cover_url is None:
            return
        if self.cover_response is None:
            self.fetch_cover()
        cover_path = os.path.join(dir_path, 'cover.' + self.cover_suffix)
        if os.path.isfile(cover_path):
            print("Cover file {} already exists".format(cover_path))
        else:
            print("Saving cover to {}".format(cover_path))
            with open(cover_path, 'wb') as f:
                self.cover_response.raw.decode_content = True
                shutil.copyfileobj(self.cover_response.raw, f)

    def preview(self):
        self.fetch_cover()
        buf = []
        buf.append("Creating the following files in " + self.root_expanded)
        last_tags = { }
        for source, tags, target in self.files:
            buf.append("")
            buf.append("{} -> {}".format(source, target))
            for k,v in tags.items():
                if k not in last_tags or last_tags[k] != v:
                    buf.append("  {}: {}".format(k, v))
            for k in last_tags.keys():
                if k not in tags:
                    buf.append("  {} -/->".format(k))
            last_tags = tags
        buf.append("")
        return '\n'.join(buf)

    def apply(self):
        dir_paths = { }
        for source, tags, target in self.files:
            target = os.path.join(self.root_expanded, target)
            target_dir = os.path.dirname(target)
            dir_paths[target_dir] = True
            if not os.path.isdir(target_dir):
                os.makedirs(os.path.normpath(target_dir))
            encode_flac(source, target, tags)
        dir_paths = list(dir_paths.keys())
        if len(dir_paths) == 0:
            print("No directory present to download the cover art to.")
        else:
            self.save_tags_py(dir_paths[0])
            self.save_cover(dir_paths[0])

def evaluate_tags_file(filepath) -> TagsFileResult:
    def encode(filepath, tags):
        if not hasattr(encode, 'res'):
            encode.res = [ ]
        encode.res.append((filepath,dict(tags)))
    def copy_tags_py():
        copy_tags_py.res = True
    def cover_url(url):
        cover_url.res = url
    def music_root(root):
        music_root.res = root
    def filepath_format(ff):
        filepath_format.res = ff
    def get_result(function):
        if not hasattr(function, 'res'):
            fail(function.__name__ + "() not set!")
        return function.res
    def get_result_optional(function):
        if not hasattr(function, 'res'):
            return None
        return function.res

    exec(compile(open(filepath, "rb").read(), filepath, 'exec'))
    res = TagsFileResult()
    res.tags_py_path = filepath
    res.filepattern = get_result(filepath_format)
    res.files = []
    res.root = get_result(music_root)
    res.root_expanded = os.path.expanduser(res.root)
    for source, tags in get_result(encode):
        target = res.filepattern.format(**tags_pathencoded(tags))
        target = unidecode.unidecode(target)
        # replace whitespace around slashes
        target = re.sub(r' [ ]*/', '/', target)
        target = re.sub(r'/ [ ]*', '/', target)
        res.files.append((source,tags,target))
    res.cover_url = get_result_optional(cover_url)
    res.copy_tags_py = get_result_optional(copy_tags_py)
    return res

def main(argv):
    dry_run = False
    tags_file = 'tags.py'
    if dry_run:
        tags_file = '/dev/stdout'

    if os.path.isfile(tags_file):
        debug("Using existing {}".format(tags_file))
    else:
        try:
            url = argv[0] if len(argv) >= 1 else ''
            extractor = None
            for k,v in backends.items():
                if re.match(k, url):
                    extractor = v
            files = fileglob_template_parameters('*.wav')
            if not extractor is None:
                parameters = extractor(url)
            else:
                parameters = generic_template_parameters(files['FILELIST_EXAMPLE'])
            parameters.update(files)
            with open(tags_file, 'w') as fh:
                create_template(parameters, outfile = fh)
        except UserError as e:
            print("Error: {}".format(e.msg))
            sys.exit(1)
        if dry_run:
            sys.exit(0)
        if 'EDITOR' in os.environ:
            subprocess.call([os.environ['EDITOR'], tags_file])
    result = evaluate_tags_file(tags_file)
    print(result.preview())
    if input('Apply above changes? [y/n] ') == 'y':
        result.apply()

sys.exit(main(sys.argv[1:]))

#print(discid.read(device='/dev/sr1'))


